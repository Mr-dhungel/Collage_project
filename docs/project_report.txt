# SECURE VOTING SYSTEM WITH FACIAL RECOGNITION AUTHENTICATION
## Project Report

### 1. INTRODUCTION

The Secure Voting System with Facial Recognition Authentication is a web-based application developed using Django framework. The system provides a secure platform for conducting elections with advanced authentication mechanisms including traditional password-based authentication and facial recognition. The system is designed to be user-friendly, secure, and efficient for both administrators and voters.

#### 1.1 Project Objectives

- Develop a secure voting platform with dual authentication methods
- Implement facial recognition for enhanced security
- Create separate interfaces for administrators and voters
- Ensure accurate vote counting and result display
- Provide real-time status updates for ongoing elections
- Maintain data integrity and user privacy

#### 1.2 System Overview

The system consists of two main components:
1. **User Authentication Module**: Handles user registration, login, and identity verification
2. **Voting Management Module**: Manages elections, candidates, and vote collection

### 2. SYSTEM ARCHITECTURE

#### 2.1 High-Level Architecture

The system follows a Model-View-Controller (MVC) architecture pattern implemented through Django's Model-View-Template (MVT) framework.

[DIAGRAM 1: System Architecture]
- Web Browser (Client)
  ↕ HTTP/HTTPS
- Django Web Server
  - URL Router
  - Views (Controllers)
  - Templates (UI)
  - Models (Data)
  ↕ Database Access
- SQLite Database
  ↕ File System Access
- File System (Media Storage)
  - Face Embeddings
  - Candidate Photos

#### 2.2 Database Schema

[DIAGRAM 2: Database Schema]
- User (accounts_user)
  - id (PK)
  - username
  - password
  - first_name
  - last_name
  - is_admin (boolean)
  - is_voter (boolean)
  - voter_id (char)
  - has_face_data (boolean)
  - face_samples_count (integer)

- Voting (voting_voting)
  - id (PK)
  - title
  - description
  - start_time
  - end_time
  - created_at
  - updated_at

- Candidate (voting_candidate)
  - id (PK)
  - voting_id (FK)
  - name
  - description
  - photo

- VotingVoter (voting_votingvoter)
  - id (PK)
  - voting_id (FK)
  - voter_id (FK)

- Vote (voting_vote)
  - id (PK)
  - voter_id (FK)
  - candidate_id (FK)
  - voting_id (FK)
  - timestamp

### 3. FACIAL RECOGNITION SYSTEM

#### 3.1 Technology Stack

The facial recognition system utilizes:
- MTCNN (Multi-task Cascaded Convolutional Networks) for face detection
- InceptionResNetV1 with VGGFace model for face embedding generation
- Cosine similarity for face matching

#### 3.2 Face Recognition Process

[DIAGRAM 3: Facial Recognition Process]
1. Face Detection (MTCNN)
   - Input: Raw image from webcam
   - Output: Detected face coordinates
2. Face Extraction
   - Input: Original image + face coordinates
   - Output: Cropped and aligned face image
3. Feature Extraction (InceptionResNetV1)
   - Input: Processed face image
   - Output: 512-dimensional face embedding vector
4. Face Matching
   - Input: Generated embedding + stored embeddings
   - Process: Calculate cosine similarity
   - Output: Match result with confidence score

#### 3.3 Face Registration Workflow

[DIAGRAM 4: Face Registration Workflow]
1. Admin initiates face registration for voter
2. System captures multiple face samples (5 recommended)
3. Each sample is validated for face presence
4. System generates embeddings for each sample
5. Embeddings are averaged for robust representation
6. Final embedding is stored in the database
7. User's has_face_data flag is updated

### 4. USER AUTHENTICATION FLOW

#### 4.1 Two-Step Authentication

[DIAGRAM 5: Authentication Flow]
1. User enters ID (username or voter_id)
2. System validates ID existence
3. If ID exists:
   a. For users with facial recognition: Redirect to face verification
   b. For users without facial recognition: Show password form
4. User completes second authentication step
5. System grants access based on user role

#### 4.2 Facial Authentication Process

1. User's face is captured via webcam
2. System detects and extracts face
3. Face embedding is generated
4. Embedding is compared with stored template
5. Access granted if similarity exceeds threshold

### 5. VOTING SYSTEM WORKFLOW

#### 5.1 Admin Workflow

[DIAGRAM 6: Admin Workflow]
1. Create/manage elections (votings)
   - Set title, description
   - Define start and end times
2. Manage candidates
   - Add candidate details and photos
   - Edit/delete candidates
3. Assign voters to elections
4. View results after election completion

#### 5.2 Voter Workflow

[DIAGRAM 7: Voter Workflow]
1. Log in using ID + password or facial recognition
2. View assigned active elections
3. Select an election to participate
4. Cast vote for a candidate
5. View results (only after election ends)

### 6. SECURITY FEATURES

#### 6.1 Authentication Security

- Two-factor authentication (ID + password/face)
- Facial recognition with liveness detection
- Password hashing using Django's security mechanisms
- CSRF protection for all forms

#### 6.2 Data Security

- Secure storage of face embeddings (not actual images)
- Automatic cleanup of temporary face images
- Database-level constraints for data integrity
- Input validation and sanitization

### 7. IMPLEMENTATION DETAILS

#### 7.1 Technology Stack

- **Backend**: Django 5.2, Python 3.x
- **Frontend**: HTML5, CSS3, JavaScript, Bootstrap 5
- **Database**: SQLite (development), supports migration to PostgreSQL
- **Facial Recognition**: TensorFlow, MTCNN, Keras-VGGFace
- **Image Processing**: OpenCV, PIL
- **Time Management**: Moment.js for client-side time display

#### 7.2 Key Components

1. **User Management**:
   - Custom user model with role-based permissions
   - Automatic voter ID generation
   - Face data management

2. **Election Management**:
   - Time-aware election status (upcoming, active, completed)
   - Candidate management with photo handling
   - Voter assignment to specific elections

3. **Voting Process**:
   - One vote per voter per election enforcement
   - Real-time status updates
   - Result calculation and display

### 8. FUTURE ENHANCEMENTS

1. **Advanced Security**:
   - Implement liveness detection to prevent photo attacks
   - Add encryption for face embeddings
   - Support hardware security keys

2. **Scalability Improvements**:
   - Migrate to PostgreSQL for larger deployments
   - Implement caching for performance optimization
   - Add asynchronous processing for face recognition

3. **Feature Additions**:
   - Support for different voting types (ranked choice, multiple selection)
   - Mobile application support
   - Email notifications for voters
   - Advanced analytics for voting patterns

### 9. CONCLUSION

The Secure Voting System with Facial Recognition Authentication provides a robust platform for conducting secure elections with enhanced identity verification. The combination of traditional authentication and biometric verification offers a significant security advantage over conventional systems while maintaining user-friendliness and accessibility.

The modular architecture allows for future enhancements and scalability, making the system adaptable to various election scenarios and security requirements.
