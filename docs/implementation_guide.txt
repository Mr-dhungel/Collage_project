# IMPLEMENTATION GUIDE
## Secure Voting System with Facial Recognition Authentication

### 1. SYSTEM REQUIREMENTS

#### 1.1 Hardware Requirements
- Computer with webcam (for facial recognition)
- Minimum 4GB RAM (8GB recommended)
- 10GB free disk space

#### 1.2 Software Requirements
- Python 3.8 or higher
- pip (Python package manager)
- Git (for version control)
- Web browser with JavaScript enabled
- Operating System: Windows, macOS, or Linux

### 2. INSTALLATION STEPS

#### 2.1 Clone the Repository
```bash
git clone https://github.com/yourusername/voting-system.git
cd voting-system
```

#### 2.2 Create and Activate Virtual Environment
```bash
# Windows
python -m venv venv
venv\Scripts\activate

# macOS/Linux
python3 -m venv venv
source venv/bin/activate
```

#### 2.3 Install Dependencies
```bash
pip install -r requirements.txt
```

The requirements.txt file should include:
```
django>=5.0.0
tensorflow>=2.8.0
mtcnn>=0.1.0
keras-vggface>=0.6
opencv-python>=4.5.0
scipy>=1.7.0
pillow>=8.0.0
pytz
```

#### 2.4 Install Additional Dependencies for Facial Recognition
For the facial recognition module to work properly, you may need to install additional system dependencies:

**Windows:**
- Visual C++ Build Tools

**macOS:**
```bash
brew install cmake
```

**Linux (Ubuntu/Debian):**
```bash
sudo apt-get update
sudo apt-get install -y cmake libsm6 libxext6 libxrender-dev
```

#### 2.5 Apply Database Migrations
```bash
python manage.py migrate
```

#### 2.6 Create Superuser (Admin)
```bash
python manage.py createsuperuser
```
Follow the prompts to create an admin user.

#### 2.7 Run the Development Server
```bash
python manage.py runserver
```

The application will be available at http://127.0.0.1:8000/

### 3. CONFIGURATION

#### 3.1 Settings Configuration
Edit the `voting_system/settings.py` file to configure:

- Time zone: Set `TIME_ZONE = 'Asia/Kathmandu'` or your preferred timezone
- Media storage: Configure `MEDIA_ROOT` and `MEDIA_URL` for storing candidate photos
- Static files: Configure `STATIC_ROOT` for production deployment

#### 3.2 Facial Recognition Configuration
The facial recognition module can be configured in `facial_recognition/face_recognition.py`:

- `threshold`: Adjust the similarity threshold (default: 0.5, lower is stricter)
- `db_path`: Change the path where face embeddings are stored

### 4. USAGE GUIDE

#### 4.1 Admin Tasks

1. **Login**
   - Access the login page at `/accounts/login/`
   - Enter your admin username and password

2. **Create a Voting**
   - Go to "Manage Votings" in the navigation bar
   - Click "Add New Voting"
   - Fill in the title, description, start time, and end time
   - Click "Save"

3. **Add Candidates**
   - From the voting detail page, click "Add Candidate"
   - Enter candidate name, description, and upload a photo
   - Click "Save"

4. **Manage Voters**
   - Go to "Manage Voters" in the navigation bar
   - Click "Add New Voter" to create voter accounts
   - For existing voters, you can edit details or delete accounts

5. **Register Voter Faces**
   - From the voter list, click "Register Face" next to a voter
   - Follow the on-screen instructions to capture face samples
   - Ensure good lighting and proper positioning

6. **Assign Voters to Votings**
   - From the voting detail page, click "Manage Voters"
   - Select the voters who should participate in this voting
   - Click "Save"

7. **View Results**
   - Results are automatically calculated when a voting ends
   - Access results from the voting detail page

#### 4.2 Voter Tasks

1. **Login**
   - Access the login page at `/accounts/login/`
   - Enter your voter ID
   - Complete authentication with password or facial recognition

2. **View Available Votings**
   - The home page shows active, upcoming, and completed votings
   - Only votings you're assigned to will be visible

3. **Cast a Vote**
   - Click on an active voting
   - Select your preferred candidate
   - Click "Submit Vote"
   - Note: You can only vote once per voting

4. **View Results**
   - Results are only visible after a voting has ended
   - Access results from the voting detail page

### 5. TROUBLESHOOTING

#### 5.1 Facial Recognition Issues

1. **Face Not Detected**
   - Ensure adequate lighting (avoid backlighting)
   - Position face directly in front of the camera
   - Check if webcam is working properly

2. **Low Confidence Match**
   - Try registering more face samples with different angles
   - Ensure similar lighting conditions during registration and verification
   - Adjust the similarity threshold in the configuration

3. **Multiple Faces Detected**
   - Ensure only one person is in the camera frame
   - The system will use the largest detected face if multiple are present

#### 5.2 Database Issues

1. **Migration Errors**
   - Delete the db.sqlite3 file and run migrations again
   - Check for syntax errors in model definitions

2. **Data Integrity Issues**
   - Use the Django admin interface at `/admin/` to inspect and fix data

#### 5.3 Time-Related Issues

1. **Voting Status Incorrect**
   - Verify server timezone settings in settings.py
   - Check that start_time and end_time are correctly set
   - Remember that all times are stored in UTC

### 6. SECURITY CONSIDERATIONS

1. **Production Deployment**
   - Set `DEBUG = False` in settings.py
   - Generate a new secret key
   - Use HTTPS with a valid SSL certificate
   - Consider using a more robust database like PostgreSQL

2. **Face Data Protection**
   - The system stores face embeddings, not actual images
   - Consider encrypting the embeddings for additional security
   - Implement regular backups of the face database

3. **Access Control**
   - Implement IP-based access restrictions for admin functions
   - Consider adding two-factor authentication for admins
   - Regularly audit user accounts and remove unused ones

### 7. MAINTENANCE

1. **Regular Backups**
   - Back up the SQLite database regularly
   - Back up the face embeddings directory

2. **System Updates**
   - Keep Django and all dependencies updated
   - Check for security patches regularly

3. **Performance Monitoring**
   - Monitor server load during peak voting periods
   - Consider scaling options for large elections
